package ch.epfl.sdp.cook4me.application

import ch.epfl.sdp.cook4me.persistence.repository.ChallengeRepository
import ch.epfl.sdp.cook4me.ui.challengeform.Challenge
import com.google.firebase.firestore.FirebaseFirestoreException

class ChallengeFormService(
    private val challengeRepository: ChallengeRepository = ChallengeRepository(),
) {

    /**
     * Submits the form if it is valid, otherwise returns the error message
     * @param challenge the challenge to submit
     * @return null if the challenge is valid, the error message otherwise
     */
    suspend fun submitForm(challenge: Challenge): String? = if (challenge.isValidChallenge) {
        challengeRepository.add(challenge)
        null
    } else {
        challenge.challengeProblem
    }

    /**
     * Updates the challenge.
     * @param id the id of the challenge to update, generated by firestore upon creation
     * @param challenge the challenge to submit
     *
     * To update a challenge:
     * 1. Update the challenge locally.
     * Call either addParticipant, changeParticipantScore, changeParticipantIsVoted.
     * For example: val updatedChallenge = addParticipant(challenge, "haolong.li@epfl.ch")
     *
     * 2. Submit the update to firestore.
     * Call challengeFormService.updateChallenge(id, updatedChallenge) within a couroutine.
     * Here the id is the id created by firestore upon creation of the challenge.
     */
    suspend fun updateChallenge(id: String, challenge: Challenge) {
        try {
            challengeRepository.update(id, challenge)
        } catch (e: FirebaseFirestoreException) {
            println("Error updating challenge: ${e.message}")
        }
    }

    /*
    * To get the challenge of given id.
    * If nothing is found, null is returned
    * */
    suspend fun getChallengeWithId(id: String): Challenge? = challengeRepository.getById(id)
}
